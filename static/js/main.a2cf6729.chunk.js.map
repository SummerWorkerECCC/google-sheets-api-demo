{"version":3,"sources":["data/Content.ts","Content.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Content","D","english","chinese","ContentArray","DisplayContents","data","Column","prop","label","DisplayError","err","h2","type","block","JSON","stringify","useFetch","formatter","response","a","json","decoded","decode","isLoading","error","h1","status","statusText","_tag","right","left","App","Header","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAEMA,EAAUC,IAAS,CACrBC,QAASD,IACTE,QAASF,MAKAG,EAAeH,IAAQD,G,OCqC9BK,EAAoD,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtD,eAAC,IAAD,CAAOA,KAAMA,EAAb,UACI,cAAC,IAAMC,OAAP,CAAcC,KAAK,UAAUC,MAAM,YACnC,cAAC,IAAMF,OAAP,CAAcC,KAAK,UAAUC,MAAM,gBAIrCC,EAA+C,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACjD,qCACI,cAAC,IAAD,CAAMC,IAAE,EAACC,KAAK,QAAd,6BACA,cAAC,IAAD,CAAMA,KAAK,UAAX,uFACA,cAAC,IAAD,CAAMC,OAAK,EAAX,SAAaC,KAAKC,UAAUL,EAAK,KAAM,SAKhCX,EAvDW,WACtB,MAAmCiB,IAAS,kCAAmC,CAC3EC,UAAU,WAAD,4BAAE,WAAOC,GAAP,iBAAAC,EAAA,sEACYD,EAASE,OADrB,cACDA,EADC,OAEDC,EAAUlB,EAAamB,OAAOF,GAF7B,kBAGAC,GAHA,2CAAF,mDAAC,KADNE,EAAR,EAAQA,UAAWlB,EAAnB,EAAmBA,KAAMmB,EAAzB,EAAyBA,MAQzB,GAAIA,EACA,OAAO,qCACH,cAAC,IAAD,CAAMC,IAAE,EAACb,KAAK,QAAd,yBACA,eAAC,IAAD,oBAAaY,EAAME,UACnB,eAAC,IAAD,uBAAgBF,EAAMG,iBAI9B,GAAIJ,EACA,OAAO,mCACH,cAAC,IAAD,wBAKR,GAAIlB,EACA,OAAQA,EAAKuB,MACT,IAAK,QACD,OAAO,cAAC,EAAD,CAAiBvB,KAAMA,EAAKwB,QACvC,IAAK,OACD,OAAO,cAAC,EAAD,CAAcnB,IAAKL,EAAKyB,OAK3C,OAAO,8BACH,cAAC,IAAD,CAAMlB,KAAK,QAAX,uCCxBOmB,EAZO,kBAClB,eAAC,IAAD,WACI,cAAC,IAAKC,OAAN,UACI,cAAC,IAAD,CAAMP,IAAE,EAAR,sCAEJ,cAAC,IAAK1B,QAAN,UACI,cAAC,EAAD,UCEGkC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,eAAC,IAAD,WACI,cAAC,IAAD,IACA,cAAC,EAAD,SAGRC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.a2cf6729.chunk.js","sourcesContent":["import * as D from 'io-ts/Decoder'\n\nconst Content = D.struct({\n    english: D.string,\n    chinese: D.string\n})\n\ntype Content = D.TypeOf<typeof Content>\n\nexport const ContentArray = D.array(Content)\n\nexport type ContentArray = D.TypeOf<typeof ContentArray>","import React from 'react'\nimport useFetch from 'react-fetch-hook'\nimport { ContentArray } from './data/Content'\nimport { Text, Table, Loading, Code, Note } from '@geist-ui/react'\nimport { DecodeError } from 'io-ts/lib/Decoder'\n\n\nconst Content: React.FC = () => {\n    const { isLoading, data, error } = useFetch('https://4y7qfk.deta.dev/content', {\n        formatter: async (response) => {\n            const json = await response.json()\n            const decoded = ContentArray.decode(json)\n            return decoded\n        }\n    })\n\n    if (error) {\n        return <>\n            <Text h1 type='error'>HTTP Error!</Text>\n            <Text>Code: {error.status}</Text>\n            <Text>Message: {error.statusText}</Text>\n        </>\n    }\n\n    if (isLoading) {\n        return <>\n            <Loading>Loading</Loading>\n        </>\n    }\n\n\n    if (data) {\n        switch (data._tag) {\n            case 'Right':\n                return <DisplayContents data={data.right} />\n            case 'Left':\n                return <DisplayError err={data.left} />\n        }\n    }\n\n\n    return <div>\n        <Text type='error'>This shouldn't happen!</Text>\n    </div>\n}\n\nconst DisplayContents: React.FC<{ data: ContentArray }> = ({ data }) => (\n    <Table data={data}>\n        <Table.Column prop='english' label='English' />\n        <Table.Column prop='chinese' label='Chinese' />\n    </Table>\n)\n\nconst DisplayError: React.FC<{ err: DecodeError }> = ({ err }) => (\n    <>\n        <Text h2 type='error'>Decoding Error!</Text>\n        <Note type='warning'>This usually happens when either an English cell or Chinese cell is empty</Note>\n        <Code block>{JSON.stringify(err, null, 4)}</Code>\n    </>\n)\n\n\nexport default Content;\n","import './App.css'\nimport React from 'react'\nimport { Text, Page } from '@geist-ui/react'\nimport Content from './Content'\n\n\nconst App: React.FC = () => (\n    <Page >\n        <Page.Header>\n            <Text h1>Google Sheets API Demo</Text>\n        </Page.Header>\n        <Page.Content>\n            <Content />\n        </Page.Content>\n    </Page>\n)\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { GeistProvider, CssBaseline } from '@geist-ui/react'\n\nReactDOM.render(\n    <React.StrictMode>\n        <GeistProvider>\n            <CssBaseline />\n            <App />\n        </GeistProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}